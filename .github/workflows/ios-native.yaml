name: build native ios libraries
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BCG729_PATH:  ${{ github.workspace }}/lib/bcg729
    OPENH264_PATH: ${{ github.workspace }}/lib/openh264
    OPENSSL_PATH: ${{ github.workspace }}/lib/openssl
    OPUS_PATH: ${{ github.workspace }}/lib/opus
    PJSIP_PATH: ${{ github.workspace }}/lib/pjsip
    MIN_IOS_VERSION: 12.2

jobs:
  openh264:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: openh264 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build For all archs
      run: |
        cd ${{ env.OPENH264_PATH }}
        h264_makefile="Makefile"
        h264_makefile_bak="Makefile.bak"
        h264_prefix="${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}"
        h264_log="${h264_prefix}/build.log"
        mkdir -p "${h264_prefix}/logs"

        pushd . > /dev/null
  
        echo "Building h264 for ${{ matrix.arch }}"

        cp "${h264_makefile}" "${h264_makefile_bak}"
        h264_sed_src="^PREFIX=.*"
        h264_sed_dst="PREFIX=${h264_prefix}"
        h264_sed_dst="${h264_sed_dst//\//\\/}"
        sed -i.deleteme "s/${h264_sed_src}/${h264_sed_dst}/" "${h264_makefile}"
        rm ${h264_makefile}.deleteme
        echo "--- Run make file for ${{ matrix.arch }}"
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No >> "${h264_log}"  || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No install >> "${h264_log}" || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No clean >> "${h264_log}" || exit
        mv "${h264_makefile_bak}" "${h264_makefile}"
        popd > /dev/null
        
      shell: sh
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}/
        overwrite: true

  openssl:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: openssl 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build OpenSSL
      id: build
      run: |
        INCLUDE_DIR=""
        OPENSSLCONF_ALL=()
        LIBSSL_IOS=()
        LIBSSL_IOSSIM=()
        LIBCRYPTO_IOS=()
        LIBCRYPTO_IOSSIM=()
        export OPENSSL_LOCAL_CONFIG_DIR=${{ github.workspace }}/res/ssl/config
        export SDKVERSION
        export IOS_MIN_SDK_VERSION
        export TVOS_MIN_SDK_VERSION
        export WATCHOS_MIN_SDK_VERSION
        export CONFIG_DISABLE_BITCODE
        cd ${{ env.OPENSSL_PATH }}
        
        chmod u+x ./Configure
        # Determine platform
        if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            PLATFORM="iPhoneSimulator"
            TARGET="ios-sim-cross-x86_64"
        else
            TARGET="ios-cross-arm64"
            PLATFORM="iPhoneOS"
        fi
        
        
        # Extract ARCH from TARGET (part after last dash)
        #ARCH=$(echo "${TARGET}" | sed -E 's|^.*\-([^\-]+)$|\1|g')
        ARCH=${{ matrix.arch }}
        # Cross compile references, see Configurations/10-main.conf
        export CROSS_COMPILE="${{ env.DEVELOPER }}/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
        export CROSS_TOP="${{ env.DEVELOPER }}/Platforms/${PLATFORM}.platform/Developer"
        export CROSS_SDK="${PLATFORM}${{ env.SDKVERSION }}.sdk"

        # Prepare TARGETDIR  
        TARGETDIR="${{ env.OPENSSL_PATH }}/bin/${PLATFORM}${{env.SDKVERSION}}-${{ matrix.arch }}.sdk"
        echo "artifact=${TARGETDIR}" >> "$GITHUB_OUTPUT"
        mkdir -p "${TARGETDIR}"
        ## Determine config options
        # Add build target, --prefix and prevent async (references to getcontext(),
        # setcontext() and makecontext() result in App Store rejections) and creation
        # of shared libraries (default since 1.1.0)
        LOCAL_CONFIG_OPTIONS="${TARGET} --prefix=${TARGETDIR} ${CONFIG_OPTIONS} no-async no-shared"

        # Only relevant for 64 bit builds
        # if [[ "${CONFIG_ENABLE_EC_NISTP_64_GCC_128}" == "true" && "${{ matrix.arch }}" == *64  ]]; then
        #     LOCAL_CONFIG_OPTIONS="${LOCAL_CONFIG_OPTIONS} enable-ec_nistp_64_gcc_128"
        # fi

        # Run Configure
        ./Configure ${LOCAL_CONFIG_OPTIONS} no-tests 

        # Run make
        echo "  Make (using ${{ env.BUILD_THREADS }} thread(s))..." 
        make -j "${{ env.BUILD_THREADS }}"  


        # Run make install
        set -e 
        make install_dev  

        # Remove source dir, add references to library files to relevant arrays
        # Keep reference to first build target for include file
        if [[ "${PLATFORM}" == iPhoneOS ]]; then
            LIBSSL_IOS+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOS+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{matrix.arch}}"
        elif [[ "${PLATFORM}" == iPhoneSimulator ]]; then
            LIBSSL_IOSSIM+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOSSIM+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{ matrix.arch }}"
        fi
      shell: sh
      env:
        SDKVERSION: 18.1
        IOS_MIN_SDK_VERSION: 12.2  
        CONFIG_DISABLE_BITCODE: true
        DEVELOPER: $(xcode-select -print-path)
        IOS_SDKVERSION: $(xcrun -sdk iphoneos --show-sdk-version)
        BUILD_THREADS: $(sysctl hw.ncpu | awk '{print $2}')
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.1

  opus:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: opus 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build opus
      id: build
      run: |
        opus_version="1.4"
        opus_opt_cflags="-Ofast -flto -g"
        opus_opt_ldflags="-flto"
        opus_opt_config_args=""
        DEVELOPER=`xcode-select -print-path`
        xcode_dev_path=`xcode-select -print-path`

        opus_repo_dir=${{ env.OPUS_PATH }}
        opus_output_dir="${opus_repo_dir}/dependencies"
        opus_build_build_dir="${opus_repo_dir}/build"
        opus_src_dir="${opus_repo_dir}/src"
        opus_inter_dir="${opus_build_build_dir}/built"

        mkdir -p "${opus_output_dir}/include"
        mkdir -p "${opus_output_dir}/lib" 
        mkdir -p $opus_inter_dir

        cd "${opus_repo_dir}"

        ccache=""
        
      
        echo "-- Opus: Compiling ${{ matrix.arch }}"
        opus_extra_cflags="-arch ${{ matrix.arch }}"
        if [ "${{ matrix.arch }}" == "i386" ] || [ "${{ matrix.arch }}" == "x86_64" ]; then
            os_platform="iPhoneSimulator"
            opus_extra_flags="--with-pic"
            opus_extra_config="--host=${{ matrix.arch }}-apple-darwin"
        else
            os_platform="iPhoneOS"
            opus_extra_config="--host=arm-apple-darwin"
        fi

        mkdir -p "${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk"
        echo "artifact=${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk" >> "$GITHUB_OUTPUT"
        
        ./autogen.sh
        
        ./configure \
            --enable-float-approx --disable-shared --enable-static \
            --with-pic --disable-extra-programs --disable-doc ${opus_extra_config} \
            --prefix="${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk" \
            ${opus_extra_config} \
            LDFLAGS="$LDFLAGS ${opus_opt_ldflags} -fPIE -miphoneos-version-min=${{env.MIN_IOS_VERSION}} -L${opus_output_dir}/lib" \
            CFLAGS="$CFLAGS ${opus_extra_cflags} ${opus_opt_cflags} -fPIE -miphoneos-version-min=${{env.MIN_IOS_VERSION}} -I${opus_output_dir}/include -isysroot ${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk" || exit

        make -j4 || exit

        make install || exit
 
      shell: sh
      env:
        SDKVERSION: 18.1
        IOS_MIN_SDK_VERSION: 12.2  
        CONFIG_DISABLE_BITCODE: true
        DEVELOPER: $(xcode-select -print-path)
        IOS_SDKVERSION: $(xcrun -sdk iphoneos --show-sdk-version)
        BUILD_THREADS: $(sysctl hw.ncpu | awk '{print $2}')
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opus-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.1
    
  bcg729:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: bcg729 
    permissions:
        contents: write
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
                
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
            
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
            
    - name: Build bcg729
      id: build
      run: |
        echo "Use BCG729"
        xcode_dev_path=`xcode-select -print-path`
        
        cd ${{ env.BCG729_PATH }}
    
        echo "-- BCG729: Compiling ${{ matrix.arch }}" 
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
            os_platform="iPhoneSimulator" 
            C_FLAGS="$C_FLAGS -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION  }} -isysroot ${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk "
        else 
            os_platform="iPhoneOS"  
        fi

        if [ -d "${{ env.BCG729_PATH }}/${os_platform}${{ env.MIN_IOS_VERSION  }}-${{ matrix.arch }}.sdk"] ]; then
            rm -rf "${{ env.BCG729_PATH }}/${os_platform}${{ env.MIN_IOS_VERSION  }}-${{ matrix.arch }}.sdk" 
        fi

        if [ -d "${{ env.BCG729_PATH }}/CMakeFiles" ]; then
            rm -rf "${{ env.BCG729_PATH }}/CMakeFiles"
            rm -rf "${{ env.BCG729_PATH }}/CMakeCache.txt"
        fi
        mkdir -p "${os_platform}${{ env.MIN_IOS_VERSION  }}-${{ matrix.arch }}.sdk"        
        cmake -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${os_platform}${{ env.MIN_IOS_VERSION  }}-${{ matrix.arch }}.sdk" -DCMAKE_SKIP_INSTALL_RPATH="ON" -DCMAKE_MAKE_PROGRAM:PATH=$(which make) -D CMAKE_C_COMPILER=`which gcc` .
        make  || exit 
        make install 
        echo "artifact=${{ env.BCG729_PATH }}/${os_platform}${{ env.MIN_IOS_VERSION  }}-${{ matrix.arch }}.sdk/" >> "$GITHUB_OUTPUT"
    
    - name: Upload artifactss
      uses: actions/upload-artifact@v4
      with:
        name: bcg729-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.1


  pjsip-h264-opus-bcg729-ssl:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-14
    needs: [bcg729, openh264, openssl, opus]
    name: pjsip + h264 + bcg729 + opus + ssl 
    permissions:
        contents: write
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
                
    - uses: actions/download-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/ssl/
       
    - uses: actions/download-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/h264/
        
    - uses: actions/download-artifact@v4
      with:
        name: opus-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/opus/
        
    - uses: actions/download-artifact@v4
      with:
        name: bcg729-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/bcg729/
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool swig 
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          brew install llvm
        fi
      shell: sh

      
    - name: Build pjsip
      id: build
      run: |
        cp -v -f ${{ github.workspace }}/res/pj/config_site.h ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        
        cd ${{ env.PJSIP_PATH }}

        if [ "${{ matrix.arch }}" == "x86_64" ]; then
            export DEVPATH="$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer"
            export ISYSROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
            export SDKROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
            sudo softwareupdate --install-rosetta --agree-to-license

            echo $DEVPATH
            echo $ISYSROOT
            export PATH="/opt/homebrew/opt/llvm/bin:$PATH" 
            export CC="/opt/homebrew/opt/llvm/bin/clang -isysroot $SDKROOT" 
            export CXX="/opt/homebrew/opt/llvm/bin/clang++ -isysroot $SDKROOT"
            export AR="/opt/homebrew/opt/llvm/bin/llvm-ar -isysroot $SDKROOT"
            export RANLIB="/opt/homebrew/opt/llvm/bin/llvm-ranlib -isysroot $SDKROOT"
            export LD="/opt/homebrew/opt/llvm/bin/ld.lld -isysroot $SDKROOT"

            export CFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -I${{ github.workspace }}/libs/bcg729/include -I${{ github.workspace }}/libs/ssl/include -I${{ github.workspace }}/libs/opus/include -I${{ github.workspace }}/libs/h264/include"
            export LDFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -L${{ github.workspace }}/libs/bcg729/lib -L${{ github.workspace }}/libs/ssl/lib -L${{ github.workspace }}/libs/opus/lib -L${{ github.workspace }}/libs/h264/lib"
            export MIN_IOS="-mios-simulator-version-min=${{ env.MIN_IOS_VERSION }}"
         
            ARCH="-arch ${{ matrix.arch }}" ./configure  --host=${{ matrix.arch }}-apple-darwin --with-bcg729=${{ github.workspace }}/libs/bcg729/ --with-ssl=${{ github.workspace }}/libs/ssl/ --with-opus=${{ github.workspace }}/libs/opus/ --with-openh264=${{ github.workspace }}/libs/h264/  || cat *config.log
            make dep

            make  
        else

            export DEVPATH="$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer"
            echo $DEVPATH
            export SDKROOT=$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk

            export CFLAGS="-arch ${{ matrix.arch }} -miphoneos-version-min=${{ env.MIN_IOS_VERSION  }} -I${{ github.workspace }}/libs/bcg729/include -I${{ github.workspace }}/libs/ssl/include -I${{ github.workspace }}/libs/opus/include -I${{ github.workspace }}/libs/h264/include"
            export LDFLAGS="-arch ${{ matrix.arch }} -L${{ github.workspace }}/libs/bcg729/lib -L${{ github.workspace }}/libs/ssl/lib -L${{ github.workspace }}/libs/opus/lib -L${{ github.workspace }}/libs/h264/lib"
            export MIN_IOS="-miphoneos-version-min=${{ env.MIN_IOS_VERSION  }}"
            
            export LDFLAGS="${LDFLAGS} -L$(find /Applications/Xcode_16.1.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs -name AudioUnit.framework -print0 | xargs -0 dirname) -framework AudioUnit"

            #export CC=`which clang`
            #export CXX=`which clang++`
            echo $CC
            echo $CXX
             
            ARCH="-arch ${{ matrix.arch }} " ./configure-iphone  --with-bcg729=${{ github.workspace }}/libs/bcg729/ --with-ssl=${{ github.workspace }}/libs/ssl/ --with-opus=${{ github.workspace }}/libs/opus/ --with-openh264=${{ github.workspace }}/libs/h264/   || cat *config.log
            
            make dep

            make 
        fi
        

        cd ./pjsip-apps/src/swig 

        sed -i'' -e 's/xamarin/maui/g' ./csharp/Makefile
        
        make 

        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        cp -v -f ${{ github.workspace }}/libs/ssl/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/opus/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/bcg729/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/h264/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib

        cp -v -f ./csharp/pjsua2maui/pjsua2maui/*.cs ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        echo "artifact=${{ github.workspace }}/pjsip-${{matrix.arch}}" >> "$GITHUB_OUTPUT"

    - name: Upload artifactss
      uses: actions/upload-artifact@v4
      with:
        name: pjsip-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.1


  pjsip:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: pjsip 
    permissions:
        contents: write
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
                
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool swig 
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          brew install llvm
        fi
      shell: sh
           

    - name: Build pjsip
      id: build
      run: |
        cp -v -f ${{ github.workspace }}/res/pj/config_site.h ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        
        sed -i'' -e 's/PJMEDIA_HAS_VIDEO 1/PJMEDIA_HAS_VIDEO 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        sed -i'' -e 's/PJMEDIA_HAS_OPENH264_CODEC 1/PJMEDIA_HAS_OPENH264_CODEC 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        sed -i'' -e 's/PJMEDIA_VIDEO_DEV_HAS_OPENGL 1/PJMEDIA_VIDEO_DEV_HAS_OPENGL 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        sed -i'' -e 's/PJMEDIA_VIDEO_DEV_HAS_OPENGL_ES 1/PJMEDIA_VIDEO_DEV_HAS_OPENGL_ES 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        sed -i'' -e 's/PJMEDIA_HAS_OPUS_CODEC 1/PJMEDIA_HAS_OPUS_CODEC 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        sed -i'' -e 's/PJMEDIA_HAS_BCG729 1/PJMEDIA_HAS_BCG729 0/g' ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        
        cd ${{ env.PJSIP_PATH }}

        if [ "${{ matrix.arch }}" == "x86_64" ]; then
            export DEVPATH="$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer"
            export ISYSROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
            export SDKROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
            sudo softwareupdate --install-rosetta --agree-to-license
            echo $DEVPATH
            echo $ISYSROOT
            export PATH="/opt/homebrew/opt/llvm/bin:$PATH" 
            export CC="/opt/homebrew/opt/llvm/bin/clang -isysroot $SDKROOT" 
            export CXX="/opt/homebrew/opt/llvm/bin/clang++ -isysroot $SDKROOT"
            export AR="/opt/homebrew/opt/llvm/bin/llvm-ar -isysroot $SDKROOT"
            export RANLIB="/opt/homebrew/opt/llvm/bin/llvm-ranlib -isysroot $SDKROOT"
            export LD="/opt/homebrew/opt/llvm/bin/ld.lld -isysroot $SDKROOT"

            export CFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} "
            export LDFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -L/opt/homebrew/opt/llvm/lib"
            export MIN_IOS="-mios-simulator-version-min=${{ env.MIN_IOS_VERSION }}"
            export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
            ARCH="-arch ${{ matrix.arch }}" ./configure  --host=${{ matrix.arch }}-apple-darwin || cat *config.log
            make dep
            make  
        else

            export DEVPATH="$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer"
            echo $DEVPATH
            export SDKROOT=$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk

            export CFLAGS="-arch ${{ matrix.arch }} -miphoneos-version-min=${{ env.MIN_IOS_VERSION  }} "
            export LDFLAGS="-arch ${{ matrix.arch }}"
            export MIN_IOS="-miphoneos-version-min=${{ env.MIN_IOS_VERSION  }}"    
            
             
            ARCH="-arch ${{ matrix.arch }} " ./configure --host=arm64-apple-darwin || cat *config.log
            
            make dep

            make 
        fi
        

        cd ./pjsip-apps/src/swig 

        sed -i'' -e 's/xamarin/maui/g' ./csharp/Makefile
        
        make 

        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        cp -v -f ${{ github.workspace }}/libs/ssl/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/opus/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/bcg729/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/h264/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib

        cp -v -f ./csharp/pjsua2maui/pjsua2maui/*.cs ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        echo "artifact=${{ github.workspace }}/pjsip-${{matrix.arch}}" >> "$GITHUB_OUTPUT"

    - name: Upload artifactss
      uses: actions/upload-artifact@v4
      with:
        name: pjsip-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.1